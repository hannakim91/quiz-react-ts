[{"/Users/hannakim/turing/4module/quiz-react-ts/src/App.tsx":"1","/Users/hannakim/turing/4module/quiz-react-ts/src/components/QuestionCard.tsx":"2","/Users/hannakim/turing/4module/quiz-react-ts/src/API.ts":"3","/Users/hannakim/turing/4module/quiz-react-ts/src/utils.ts":"4"},{"size":3011,"mtime":1609447462407,"results":"5","hashOfConfig":"6"},{"size":905,"mtime":1609447270538,"results":"7","hashOfConfig":"6"},{"size":872,"mtime":1609446322278,"results":"8","hashOfConfig":"6"},{"size":122,"mtime":1609446170686,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1wcjkti",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hannakim/turing/4module/quiz-react-ts/src/App.tsx",["19"],"import React, {useState} from 'react';\nimport { fetchQuizQuestions } from './API';\n//Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { Difficulty, QuestionState } from './API';\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  \n  const startTrivia = async () => {\n    // trigger api fetch and change GameOver to false\n    setLoading(true);\n    setGameOver(false);\n    // fetch and add questions to state\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    // error handling would be good to implement\n    // reset everything for fresh game -- each setState call will trigger API call - only if there is a change; even so, fine for small app like this\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    // loading is complete\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user's answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer - will be a boolean\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct (true)\n      if (correct) setScore(prev => prev + 1);\n      // save answer in the array for user answers\n        // es6 syntax - don't need key/value pairing if key and value are same\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n        Start\n        </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score:</p> : null}\n      {loading && <p>Loading Questions...</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n        questionNum={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      />)}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n        ) : null}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/hannakim/turing/4module/quiz-react-ts/src/components/QuestionCard.tsx",[],"/Users/hannakim/turing/4module/quiz-react-ts/src/API.ts",[],"/Users/hannakim/turing/4module/quiz-react-ts/src/utils.ts",[],{"ruleId":"20","severity":1,"message":"21","line":21,"column":10,"nodeType":"22","messageId":"23","endLine":21,"endColumn":15},"@typescript-eslint/no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar"]